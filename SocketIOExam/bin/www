#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socketioexam:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var users = []; // 사용자 목록
var socketio = require('socket.io');
var io = socketio.listen(server);
io.sockets.on('close', function(socket){

});
io.sockets.on('connection', function(socket){
  console.log('connection!!');
  socket.on('chat_conn', function(raw_msg){
    var msg = JSON.parse(raw_msg);
    var index = users.indexOf(msg.chat_id);
    if( index == -1){ // users 에 존재하지 않음. 로그인가능
      users.push(msg.chat_id);
      socket.emit('chat_join', JSON.stringify(users));
      socket.broadcast.emit('chat_join', JSON.stringify(users));
    }else{ // users에 존재함.--> 로그인 불가
      socket.emit('chat_fail',
        JSON.stringify({chat_id:msg.chat_id}));
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
